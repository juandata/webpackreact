Webpack es un module bundler.

Sirve para crear un archivo bundle que tendrá todos los assets que conformarán la aplicación, algo similar a lo que hace
npm run build en React. Los archivos básicos para que webpack funcione son un index.html desde donde se declara un  script con src
bundle.js justo encima del body y un archivo js (por ejemplo app.js) el cual tendrá la lógica necesaria para que funcione la aplicación.
El otro archivo es la configuración de webpack, el cual es un archivo webpack.config.js, en este archivo se indica dentro del método
module.exports = {} los objetos que configuran método webpack (desde la consola). Las propiedes básicas del objeto son entry y output,
las cuales indican la entrada (app.js) y la salida (bundle.js) después de que se ejecute webpack, la propiedad watch es opcional,
esta sirve para  realizar un watchmode y rebuild el archivo bundle.js cada vez que se realice un cambio en app.js o cualquier
otro archivo que deba compilarse con el comando webpack.

Lo primero que debe hacerse si en la máquina no se ha instalado webpack globalmente es ejecutar el siguiente comando:
npm install webpack -g

Webpack viene con un servior de desarrollo, para ejecutarlo ingresar el siguiente comando:
webpack-dev-server
con esto la aplicación debería correr en localhost://8080 y cualquier cambio a la misma
debería reflejarse inmediatamente gracias a watch (hot-loading). Si esto no funciona recordar
que es necesario instalar primero con el npm al servidor globalmente: npm install webpack-dev-server -g

Para añadir loaderes, lo cual es similar a tasks en otros bundles es necesario ahora instalar node modules en el proyecto.
Para este proyecto en particular instalaré Babel y JShint, para lograrlo debo primero usar npm init, el cual genera
un archivo package.json que contendrá las dependencias y configuración de mi aplicación.

Una vez finalizado esto, es ahora necesario instalar las dependencias de desarrollo que tendrá mi aplicación.
Por ejemplo: npm install babel-core babel-loader jshint jshint-loader node-libs-browser babel-preset-es2015 babel-preset-react webpack  --save-dev

2. Muy importante, añadir react una vez webpack está configurado: npm install react react-dom --save

3. Sobre typecheckers, si bien typeProps sirve para revisar que los componentes usen los datos que deberían,
es mejor utilizar un typechecker más grande para proyectos más complejos. Por ejemplo, flow o typescript.
https://reactjs.org/docs/static-type-checking.html
npm install --save-dev flow-bin
npm install remove-flow-types-loader --save-dev (webpack)

4. Para crear un build optimizado para producción utilizar el siguiente comando:
webpack -p y para utilizar un hash para evitar que los navegadores entreguen una página cacheada cuando
hay cambios en el servidor es necesario seguir los siguientes pasos:
1. INSTALAR html-webpack-plugin
2-AGREGAR EN LA PARTE SUPERIOR DE WEBPACK CONFIG:
 const path = require('path');
 const HtmlWebpackPlugin = require('html-webpack-plugin');
CAMBIAR EL OBJETO OUTPUT MOVIÉNDOLO HACIA LA PARTE INFERIOR (ANTES DE RESOLVE Y DESPUÉS DE PLUGINS) y
cambiar el valor de la propiedad filename de bundle.js a '[name].[chunkhash].js',
añadir también la propiedad path: path.resolve(__dirname, 'dist')
de esta forma el bundle no quedará en el directorio raiz sino en la carpeta dist.
Con esto cada vez que se ejecute webpack o webpack -p los archivos de producción quedarán
servidos en la carpeta dist. Importante recordar añadir el div raiz con el id (el que toma react para
añadir los componentes )en el html ya que
webpack -p no lo añade automáticamente.
